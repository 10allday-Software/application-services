/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

use std::io::prelude::*;
use std::{
    env,
    collections::HashMap,
    convert::TryFrom, convert::TryInto,
    fs::File,
    iter::IntoIterator,
    fmt::Display,
    path::{Path, PathBuf},
};

use anyhow::bail;
use anyhow::Result;
use askama::Template;

use super::types;

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

use anyhow::bail;
use std::convert::TryInto;
use ffi_support::{
    define_bytebuffer_destructor, define_handle_map_deleter, define_string_destructor, ByteBuffer,
    ConcurrentHandleMap, ExternError, FfiStr
};

{% for m in self.members() -%}
  {{ m.render().unwrap() }}
{% endfor -%}

// XXX TODO: string, bytes etc destructors if necessary
"#)]
pub struct ComponentInterfaceScaffolding<'a> {
  ci: &'a types::ComponentInterface,
}
impl<'a> ComponentInterfaceScaffolding<'a> {
    pub fn new(ci: &'a types::ComponentInterface) -> Self {
        Self { ci }
    }

    // XXX TODO: I'd like to make this return `impl Iterator` but then askama takes a reference to it
    // and tries to call `into_iter()` and that doesn't work becaue it tries to do a move. Bleh. More to learn...
    fn members(&self) -> Vec<Box<dyn askama::Template + 'a>> {
        self.ci.members.iter().map(|m| {
            match m {
                types::InterfaceMember::Object(obj) => ObjectScaffolding::boxed(self.ci, obj),
                types::InterfaceMember::Record(rec) => RecordScaffolding::boxed(self.ci, rec),
                types::InterfaceMember::Namespace(n) => NamespaceScaffolding::boxed(self.ci, n),
                types::InterfaceMember::Enum(e) => EnumScaffolding::boxed(self.ci, e),
            }
        }).collect()
    }
}

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
lazy_static::lazy_static! {
  static ref UNIFFI_HANDLE_MAP_{{ self.struct_name() }}: ConcurrentHandleMap<{{ self.struct_name() }}> = ConcurrentHandleMap::new();
}
// XXX TODO: interpolate name prefix from containing environment.
define_handle_map_deleter!(UNIFFI_HANDLE_MAP_{{ self.struct_name() }}, {{ self.struct_name() }}_free,);

{%- for m in self.members() %}
    {{ m.render().unwrap() }}
{% endfor -%}
"#)]
struct ObjectScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    obj: &'a types::ObjectType,
}
impl<'a> ObjectScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, obj: &'a types::ObjectType) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, obj })
    }

    fn struct_name(&self) -> &'a str {
        &self.obj.name
    }

    fn members(&self) -> Vec<Box<dyn askama::Template + 'a>> {
        self.obj.members.iter().map(|m|{
            match m {
                types::ObjectTypeMember::Constructor(cons) => ObjectConstructorScaffolding::boxed(self.ci, self.obj, cons),
                types::ObjectTypeMember::Method(meth) => ObjectMethodScaffolding::boxed(self.ci, self.obj, meth),
            }
        }).collect()
    }
}
#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
#[no_mangle]
pub extern "C" fn {{ self.ffi_name() }}(
  {%- for arg in cons.argument_types %}
    {{ arg.ffi_name() }}: {{ arg.typ.resolve(ci)|type_decl }},
  {%- endfor %}
  err: &mut ExternError,
) -> u64 {
    log::debug!("{{ self.ffi_name() }}");
    UNIFFI_HANDLE_MAP_{{ obj.name }}.insert_with_output(err, || {
        {{ obj.name }}::{{ cons.name }}(
          {%- for arg in cons.argument_types %}
           {{ arg.ffi_name()|type_lift(arg.typ.resolve(ci)) }},
        {%- endfor %}
        )
    })
}
"#)]
struct ObjectConstructorScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    obj: &'a types::ObjectType,
    cons: &'a types::ObjectTypeConstructor,
}

impl<'a> ObjectConstructorScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, obj: &'a types::ObjectType, cons: &'a types::ObjectTypeConstructor) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, obj, cons })
    }

    fn ffi_name(&self) -> String {
        format!("{}_{}", self.obj.name, self.cons.name)
    }
}

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
#[no_mangle]
pub extern "C" fn {{ self.ffi_name() }}(
  handle u64,
  {%- for arg in meth.argument_types %}
    {{ arg.ffi_name() }}: {{ arg.typ.resolve(ci)|type_decl }},
  {%- endfor %}
  err: &mut ExternError,
)
  {%- match meth.return_type -%}
  {%- when Some with (typ) %}
    -> {{ typ.resolve(ci)|type_decl }}
  {% when None -%}
  {%- endmatch %}
{
    log::debug!("{{ self.ffi_name() }}");
    UNIFFI_HANDLE_MAP_{{ obj.name }}.call_with_result_mut(err, handle, |val| {
        let r = val.{{ meth.name }}(
          {%- for arg in meth.argument_types %}
           {{ arg.ffi_name()|type_lift(arg.typ.resolve(ci)) }},
        {%- endfor %}
        );
        {%- match meth.return_type -%}
        {%- when Some with (typ) %}
        {{ "r"|type_lower(typ.resolve(ci)) }}
        {% when None -%}
        r
        {%- endmatch %}
    })
}"#)]
struct ObjectMethodScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    obj: &'a types::ObjectType,
    meth: &'a types::ObjectTypeMethod,
}

impl<'a> ObjectMethodScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, obj: &'a types::ObjectType, meth: &'a types::ObjectTypeMethod) -> Box<dyn askama::Template + 'a> {
        Box::new(Self {ci, obj, meth })
    }

    fn ffi_name(&self) -> String {
        format!("{}_{}", self.obj.name, self.meth.name)
    }
}

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
TODO: RECORD {{ rec.name }}
"#)]
struct RecordScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    rec: &'a types::RecordType,
}

impl<'a> RecordScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, rec: &'a types::RecordType) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, rec })
    }
}



#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
// Namespace { ns.name }
enum {{ ns.struct_name() }}{}
{%- for m in self.members() %}
    {{ m.render().unwrap() }}
{% endfor -%}
"#)]
struct NamespaceScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    ns: &'a types::NamespaceType,
}
impl<'a> NamespaceScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, ns: &'a types::NamespaceType) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, ns })
    }

    fn members(&self) -> Vec<Box<dyn askama::Template + 'a>> {
        self.ns.members.iter().map(|m|{
            match m {
                types::NamespaceTypeMember::Function(f) => NamespaceFunctionScaffolding::boxed(self.ci, self.ns, f),
            }
        }).collect()
    }
}

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
#[no_mangle]
pub extern "C" fn {{ f.ffi_name() }}(
  {%- for arg in f.argument_types %}
    {{ arg.ffi_name() }}: {{ arg.typ.resolve(ci)|type_decl }},
  {%- endfor %}
)
  {%- match f.return_type -%}
  {%- when Some with (typ) %}
    -> {{ typ.resolve(ci)|type_decl }}
  {% when None -%}
  {%- endmatch %}
{
    log::debug!("{{ f.ffi_name() }}");
    let r = {{ ns.struct_name() }}::{{ f.rust_name() }}(
      {%- for arg in f.argument_types %}
      {{ arg.ffi_name()|type_lift(arg.typ.resolve(ci)) }},
      {%- endfor %}
    );
    {%- match f.return_type -%}
    {%- when Some with (typ) %}
      {{ "r"|type_lower(typ.resolve(ci)) }}
    {% when None -%}
      r
    {%- endmatch %}
}
"#)]
struct NamespaceFunctionScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    ns: &'a types::NamespaceType,
    f: &'a types::NamespaceTypeFunction,
}

impl<'a> NamespaceFunctionScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, ns: &'a types::NamespaceType, f: &'a types::NamespaceTypeFunction) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, ns, f })
    }
}

#[derive(Template)]
#[template(ext="rs", escape="none", source=r#"
enum {{ e.rust_name() }} {
{%- for v in e.values %}
    {{ v }} = {{ loop.index -}},
{%- endfor %}
}

impl std::convert::TryFrom<u32> for {{ e.rust_name() }} {
    type Error = anyhow::Error;
    fn try_from(v: u32) -> Result<{{ e.rust_name() }}, anyhow::Error> {
        Ok(match v {
            {%- for v in e.values %}
            {{ loop.index }} => {{ e.rust_name() }}::{{ v }},
            {%- endfor %}
            _ => bail!("Invalid {{ e.rust_name() }} enum value: {}", v),
        })
    }
}
"#)]
struct EnumScaffolding<'a> {
    ci: &'a types::ComponentInterface,
    e: &'a types::EnumType,
}

impl<'a> EnumScaffolding<'a> {
    fn boxed(ci: &'a types::ComponentInterface, e: &'a types::EnumType) -> Box<dyn askama::Template + 'a> {
        Box::new(Self { ci, e })
    }
}

mod filters {
    use std::fmt;
    use crate::types;
    use anyhow::Error;

    pub fn type_decl(typ: &Result<types::TypeReference, Error>) -> Result<String, askama::Error> {
        // TODO: how to return a nice askama::Error here?
        let typ = typ.as_ref().unwrap();
        Ok(match typ {
            types::TypeReference::Boolean => "u8".to_string(),
            types::TypeReference::U64 => "u64".to_string(),
            types::TypeReference::U32 => "u32".to_string(),
            types::TypeReference::Enum(_) => "u32".to_string(),
            types::TypeReference::String => "FfiStr<'_>".to_string(), // XXX TODO: not suitable for use in return position?
            _ => format!("[TODO: DECL {:?}]", typ),
        })
    }

    pub fn type_lift(nm: &dyn fmt::Display, typ: &Result<types::TypeReference, Error>) -> Result<String, askama::Error> {
        let nm = nm.to_string();
        let typ = typ.as_ref().unwrap();
        Ok(match typ {
            types::TypeReference::Boolean => format!("({} != 0)", nm),
            types::TypeReference::U64 => nm,
            types::TypeReference::U32 => nm,
            // XXX TODO: error handling if the conversion fails.
            types::TypeReference::Enum(_) => format!("({}).try_into().unwrap()", nm),
            types::TypeReference::String => format!("({}).as_str()", nm),
            _ => format!("[TODO: LIFT {:?}]", typ),
        })
    }

    pub fn type_lower( nm: &dyn fmt::Display, typ: &Result<types::TypeReference, Error>) -> Result<String, askama::Error> {
        let nm = nm.to_string();
        let typ = typ.as_ref().unwrap();
        Ok(match typ {
            types::TypeReference::Boolean => format!("({} as u8)", nm),
            types::TypeReference::U64 => nm,
            types::TypeReference::U32 => nm,
            types::TypeReference::Enum(_) => format!("({} as u32)", nm),
            types::TypeReference::String => format!("({}).as_str()", nm),
            _ => format!("[TODO: LOWER {:?}]", typ),
        })
    }
}